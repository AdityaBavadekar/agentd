"""
The sub-agent for the agentd system.

Report Generation Agent: Compiles all gathered research and analysis into a comprehensive 'Idea Feasibility Report' and manages the user's decision to proceed.
"""

import json

from google.adk.agents import Agent
from google.adk.agents.callback_context import CallbackContext
from google.genai import types

from agentd.sub_agents.image_prompt_agent import image_prompt_agent_tool
from agentd.utils import LinkInjectorAgent, create_and_upload_pdf, json_to_markdown

from . import agent_constants


def simple_after_agent_callback_modifier(
    callback_context: CallbackContext, *_args, **_kwargs
):
    """Generates a PDF report from the report agent's output and uploads it to cloud storage."""

    # Flow:
    # 1. Replace "@[TARGET_USERS_PLACEHOLDER]@" with JSON formatted data from previous agent
    # 2. Replace the Image Identifiers generated by the image prompt agent with actual image urls
    # 3. set the state["generated_report"] to the modified report content
    # 4. Create and Upload the report to cloud storage and return the public URL

    agent_name = callback_context.agent_name
    print("===" * 8)
    print(f"[Callback] Before model call for agent: {agent_name}")
    print("===" * 8)
    report_content: str = callback_context.state["generated_report"]
    report_content = report_content.replace("```markdown", "")
    report_content = report_content.replace("```", "")

    # [1] Replace "@[TARGET_USERS_PLACEHOLDER]@" with JSON Formatted data from previous agent
    report_content = report_content.replace("<DO_NOT_CHANGE>", "")
    report_content = report_content.replace("</DO_NOT_CHANGE>", "")

    target_users_analysis = json_to_markdown(
        json.loads(callback_context.state["target_users_analysis"])
    )

    if callback_context.state.get("users_analysis_image_urls", []):
        target_users_analysis += "\n\n### User Analysis Images\n"
        for image_url in callback_context.state["users_analysis_image_urls"]:
            target_users_analysis += f"![User Analysis Image]({image_url})\n"

    key = "@[TARGET_USERS_PLACEHOLDER]@"
    report_content = report_content.replace(key, target_users_analysis)

    # [2] Replace the Image Identifiers generated by the image prompt agent with actual image urls
    report_content = LinkInjectorAgent.replace_identifiers_with_urls(
        text=report_content, state=callback_context.state
    )

    # [3] also change the state
    callback_context.state["generated_report"] = report_content

    # [4] Create and Upload the report to cloud storage and return the public URL
    public_url = create_and_upload_pdf(
        report_content,
        "Idea Feasibility Report",
        local_dir="reports",
        remote_dir="reports",
    )
    print("==== Report generation completed successfully.==== ")
    print(f"Public URL of the report: {public_url}")
    callback_context.state["generated_report_url"] = public_url

    return types.Content(
        parts=[
            types.Part(
                text=f"\n\n## Download Report:\nYou can download the report from [here]({public_url}).",
            ),
            types.Part(
                file_data=types.FileData(
                    display_name="idea_feasibility_report.pdf",
                    mime_type="application/pdf",
                    file_uri=public_url,
                ),
            ),
            types.Part(
                text="<ASK>Would you like to proceed with this idea? So I can provide you more detailed Report.<ASK>",
            ),
        ],
        role="model",
    )


report_generation_agent = Agent(
    name=agent_constants.AGENT_NAME,
    model=agent_constants.MODEL,
    instruction=agent_constants.AGENT_INSTRUCTION,
    description=agent_constants.AGENT_DESCRIPTION,
    after_agent_callback=simple_after_agent_callback_modifier,
    tools=[image_prompt_agent_tool],
    output_key="generated_report",
)
